name: Release

on:
  push:
    tags:
      - '*.*.*'
      # These are used to trigger (only) MELPA Stable. See
      # https://github.com/emacs-tree-sitter/elisp-tree-sitter/issues/177
      - '!melpa-stable/**'

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: macos-10.15
            bundle_target: macos
            emacs-version: '27.2'
            ext: dylib
          - os: ubuntu-18.04
            bundle_target: linux
            emacs-version: '27.2'
            ext: so
          - os: windows-2019
            bundle_target: windows
            emacs-version: '27.2'
            ext: dll
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
      - run: .github/script/setup

      - name: Install tree-sitter CLI
        run: npm install -g tree-sitter-cli@0.19.3

      - uses: purcell/setup-emacs@v3.0
        if: runner.os != 'Windows'
        with:
          version: ${{ matrix.emacs-version }}
      # Seems like the Emacs archive from GNU's FTP uses its own outdated bundle of CA certs, which
      # wouldn't include the new LetsEncrypt's root CA cert, which is used by MELPA, among others.
      # So we use mingw64's Emacs instead. TODO: Switch back whenever possible.
      - name: Install Emacs (Windows)
        if: runner.os == 'Windows'
        run: |
          $env:MSYS_PATH = "$env:CD\ci-tools\msys2"
          choco install msys2 --params="/InstallDir:$env:MSYS_PATH /NoPath"
          $env:PATH = "$env:MSYS_PATH\usr\bin;" + $env:PATH
          pacman -S --noconfirm --needed mingw-w64-x86_64-emacs
          echo "$env:MSYS_PATH\mingw64\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf-8 -Append

      - run: .github/script/setup-cask
      - run: cask install

      - run: script/compile all
        continue-on-error: true

      - run: script/inspect-binaries
        continue-on-error: true
      - run: script/test
      - run: cask package

      - name: Determine version
        if: runner.os != 'Windows'
        run: |
          echo BUNDLE_VERSION=$(script/bundle-version) > $GITHUB_ENV
      - name: Determine version
        if: runner.os == 'Windows'
        run: |
          $bundle_version = ((script/bundle-version) | Out-String).Trim()
          echo BUNDLE_VERSION=$bundle_version | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Upload binary
        uses: actions/upload-artifact@v2
        with:
          name: tree-sitter-grammars
          path: tree-sitter-grammars-${{ matrix.bundle_target }}-${{ env.BUNDLE_VERSION }}.tar.gz
          if-no-files-found: error

  publish:
    needs: build
    runs-on: ubuntu-18.04
    steps:
      - uses: purcell/setup-emacs@v3.0
        with:
          version: '27.2'
      - uses: actions/checkout@v2
      - name: Generate release notes
        run: |
          RELEASE_VERSION=$(git describe --tags --abbrev=0)
          script/dev release-notes "$RELEASE_VERSION" > RELEASE-NOTES
          echo RELEASE_VERSION=$RELEASE_VERSION >> $GITHUB_ENV
          cat RELEASE-NOTES

      - name: Download binaries
        uses: actions/download-artifact@v2
        with:
          name: tree-sitter-grammars
      - run: ls -R

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          body_path: RELEASE-NOTES
          files: |
            tree-sitter-grammars-*.tar.gz

      - name: Greenlight releasing to MELPA
        run: |
          git push origin ${{ env.RELEASE_VERSION }}:refs/heads/release
        continue-on-error: true

      # We don't want this to trigger workflows, so we don't use a personal access token.
      - name: Greenlight releasing to MELPA Stable
        uses: actions/github-script@v4
        with:
          script: |
            github.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: "refs/tags/melpa-stable/v${{ env.RELEASE_VERSION }}",
              sha: context.sha
            })
        continue-on-error: true
